strict digraph  {
bb_4003f0 [assembly="4195312: JMP qword ptr [0x00601000]\n", function=puts];
bb_400520 [assembly="4195616: PUSH RBP\n4195617: MOV RBP,RSP\n4195620: MOV qword ptr [RBP + -0x18],RDI\n4195624: MOV dword ptr [RBP + -0x4],0x0\n4195631: JMP 0x004005a1\n", function=verify];
bb_400531 [assembly="4195633: MOV EAX,dword ptr [RBP + -0x4]\n4195636: MOVSXD RDX,EAX\n4195639: MOV RAX,qword ptr [RBP + -0x18]\n4195643: ADD RAX,RDX\n4195646: MOVZX EAX,byte ptr [RAX]\n4195649: MOV EDX,EAX\n4195651: MOV EAX,dword ptr [RBP + -0x4]\n4195654: XOR EAX,EDX\n4195656: MOV byte ptr [RBP + -0x5],AL\n4195659: MOVZX EDX,byte ptr [RBP + -0x5]\n4195663: MOV EAX,dword ptr [RBP + -0x4]\n4195666: XOR EAX,0x9\n4195669: AND EAX,0x3\n4195672: MOV ECX,EAX\n4195674: SHL EDX,CL\n4195676: MOV EAX,EDX\n4195678: MOV EDX,EAX\n4195680: MOVZX ESI,byte ptr [RBP + -0x5]\n4195684: MOV EAX,dword ptr [RBP + -0x4]\n4195687: XOR EAX,0x9\n4195690: AND EAX,0x3\n4195693: MOV ECX,EAX\n4195695: MOV EAX,0x8\n4195700: SUB EAX,ECX\n4195702: MOV ECX,EAX\n4195704: SAR ESI,CL\n4195706: MOV EAX,ESI\n4195708: OR EAX,EDX\n4195710: MOV byte ptr [RBP + -0x5],AL\n4195713: ADD byte ptr [RBP + -0x5],0x8\n4195717: MOV EAX,dword ptr [RBP + -0x4]\n4195720: CDQE\n4195722: MOVZX EAX,byte ptr [RAX + 0x601020]\n4195729: CMP AL,byte ptr [RBP + -0x5]\n4195732: JZ 0x0040059d\n", function=verify];
bb_400596 [assembly="4195734: MOV EAX,0x0\n4195739: JMP 0x004005c3\n", function=verify];
bb_40059d [assembly="4195741: ADD dword ptr [RBP + -0x4],0x1\n", function=verify];
bb_4005a1 [assembly="4195745: MOV EAX,dword ptr [RBP + -0x4]\n4195748: MOVSXD RDX,EAX\n4195751: MOV RAX,qword ptr [RBP + -0x18]\n4195755: ADD RAX,RDX\n4195758: MOVZX EAX,byte ptr [RAX]\n4195761: TEST AL,AL\n4195763: JNZ 0x00400531\n", function=verify];
bb_4005b9 [assembly="4195769: CMP dword ptr [RBP + -0x4],0x17\n4195773: SETZ AL\n4195776: MOVZX EAX,AL\n", function=verify];
bb_4005c3 [assembly="4195779: POP RBP\n4195780: RET\n", function=verify];
bb_4005c5 [assembly="4195781: PUSH RBP\n4195782: MOV RBP,RSP\n4195785: SUB RSP,0x10\n4195789: MOV dword ptr [RBP + -0x4],EDI\n4195792: MOV qword ptr [RBP + -0x10],RSI\n4195796: CMP dword ptr [RBP + -0x4],0x2\n4195800: JZ 0x004005eb\n", function=main];
bb_4005da [assembly="4195802: MOV EDI,0x4006c8\n4195807: CALL 0x004003f0\n", function=main];
bb_4005e4 [assembly="4195812: MOV EAX,0xffffffff\n4195817: JMP 0x0040061d\n", function=main];
bb_4005eb [assembly="4195819: MOV RAX,qword ptr [RBP + -0x10]\n4195823: ADD RAX,0x8\n4195827: MOV RAX,qword ptr [RAX]\n4195830: MOV RDI,RAX\n4195833: CALL 0x00400520\n", function=main];
bb_4005fe [assembly="4195838: TEST EAX,EAX\n4195840: JZ 0x0040060e\n", function=main];
bb_400602 [assembly="4195842: MOV EDI,0x4006f0\n4195847: CALL 0x004003f0\n", function=main];
bb_40060c [assembly="4195852: JMP 0x00400618\n", function=main];
bb_40060e [assembly="4195854: MOV EDI,0x400718\n4195859: CALL 0x004003f0\n", function=main];
bb_400618 [assembly="4195864: MOV EAX,0x0\n", function=main];
bb_40061d [assembly="4195869: LEAVE\n4195870: RET\n", function=main];
bb_4003f0 -> bb_40060c  [flowType=ret];
bb_4003f0 -> bb_400618  [flowType=ret];
bb_4003f0 -> bb_4005e4  [flowType=ret];
bb_400520 -> bb_4005a1  [flowType=Jump];
bb_400531 -> bb_40059d  [flowType="Conditional Jump"];
bb_400531 -> bb_400596  [flowType=Fall];
bb_400596 -> bb_4005c3  [flowType=Jump];
bb_40059d -> bb_4005a1  [flowType=Fall];
bb_4005a1 -> bb_400531  [flowType="Conditional Jump"];
bb_4005a1 -> bb_4005b9  [flowType=Fall];
bb_4005b9 -> bb_4005c3  [flowType=Fall];
bb_4005c3 -> bb_4005fe  [flowType=ret];
bb_4005c5 -> bb_4005eb  [flowType="Conditional Jump"];
bb_4005c5 -> bb_4005da  [flowType=Fall];
bb_4005da -> bb_4003f0  [flowType=Call];
bb_4005da -> bb_4005e4  [flowType=Fall];
bb_4005e4 -> bb_40061d  [flowType=Jump];
bb_4005eb -> bb_400520  [flowType=Call];
bb_4005eb -> bb_4005fe  [flowType=Fall];
bb_4005fe -> bb_40060e  [flowType="Conditional Jump"];
bb_4005fe -> bb_400602  [flowType=Fall];
bb_400602 -> bb_4003f0  [flowType=Call];
bb_400602 -> bb_40060c  [flowType=Fall];
bb_40060c -> bb_400618  [flowType=Jump];
bb_40060e -> bb_4003f0  [flowType=Call];
bb_40060e -> bb_400618  [flowType=Fall];
bb_400618 -> bb_40061d  [flowType=Fall];
}
